#Sample docker compose file for LDAP->JWT auth
# This adds a login container and the frontend will call that endpoint with username and password
#  then recieve a jwt response. JWT is then used to access services.
#  you will need to add your own ldap config details
#
version: "3.1"

secrets:
  webservices_cert:
    external: true
  webservices_key:
    external: true

services:
  kong-database:
    image: postgres:9.6
    deploy:
      restart_policy:
        condition: any
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:0.13
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
    command: kong migrations up
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    #tried changing to kong:0.12.0-alpine but didn't work as health check needs curl
    image: kong:0.13
    deploy:
      restart_policy:
        condition: on-failure
    secrets:
     - webservices_cert
     - webservices_key
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_SSL_CERT=/run/secrets/webservices_cert
      - KONG_SSL_CERT_KEY=/run/secrets/webservices_key
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      # - 80:8000 Activate for debugging
      - 443:8443
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8000 || exit 1"]
      interval: 5s
      retries: 10

  kong-configure:
    image: metcarob/docker-ws-caller:0.0.9
    deploy:
      restart_policy:
        condition: on-failure
        delay: 6s
    entrypoint: "/bin/sh"
    command:    "-c \" \
                 (curl -i -X POST \
                   --url http://kong:8001/consumers/ \
                   --data 'username=sampleuser' ) && \
                 (curl -i -X POST \
                   --url http://kong:8001/consumers/sampleuser/basic-auth \
                   --data 'username=sampleuser'  \
                   --data 'password=sampleuser' ) && \
                 (curl -i -X POST \
                   --url http://kong:8001/consumers/sampleuser/acls \
                   --data 'group=samplegroup' ) && \
                 (curl -i -X POST \
                   --url http://kong:8001/plugins/ \
                   --data 'name=cors' \
                   --data 'config.origins=*' )
                \""

  loginservice:
    image: metcarob/kong_ldap_login_endpoint:0.0.9
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      - LOGINEP_LDAP_HOST=unixldap.somehost.uk
      - LOGINEP_LDAP_PORT=546
      - LOGINEP_USER_BASE_DN=ou=People,ou=everyone,dc=somehost,dc=com
      - LOGINEP_GROUP_BASE_DN=ou=Group,ou=everyone,dc=somehost,dc=com
      - LOGINEP_SYNCACL=soa_tech_monitoring
      # Time out JWT tokens in 3 hours 60 * 3
      - LOGINEP_JWT_TOKEN_TIMEOUT=1800 

  kong-addapis-loginservice:
    image: metcarob/docker-ws-caller:0.0.9
    deploy:
      restart_policy:
        condition: on-failure
        delay: 6s
    entrypoint: "/bin/sh"
    command:    "-c \" \
                   (kong_install_service_and_route http://kong:8001 login http loginservice 80 \\\"/login\\\" https /login)
                \""

  dockjob:
    image: metcarob/dockjob:latest
    #image: dockjobdev
    environment:
      - APIAPP_APIURL=${EXTURL}:${EXTPORT}/dockjobapi
      - APIAPP_APIDOCSURL=${EXTURL}:${EXTPORT}/dockjobapidocs
      - APIAPP_FRONTENDURL=${EXTURL}:${EXTPORT}/dockjob
      - "APIAPP_APIACCESSSECURITY=[{\"type\": \"basic-auth-login-toget-jwttoken\", \"loginurl\": \"${EXTURL}:${EXTPORT}/login/\", \"cookiename\": \"jwt-auth-cookie\" }]"
    deploy:
      restart_policy:
        condition: any

  kong-addapis-dockjob:
    #Add API's to kong to forward requests to dockjob
    # also configure basic-auth so that only users in group samplegroup can access
    image: metcarob/docker-ws-caller:0.0.9
    deploy:
      restart_policy:
        condition: on-failure
        delay: 6s
    entrypoint: "/bin/sh"
    command:    "-c \" \
                   (kong_install_service_and_route http://kong:8001 dockjobapi http dockjob 80 \\\"/api\\\" https /dockjobapi) && \
                   (kong_install_service_and_route http://kong:8001 dockjobapidocs http dockjob 80 \\\"/apidocs\\\" https /dockjobapidocs) && \
                   (kong_install_service_and_route http://kong:8001 dockjob http dockjob 80 \\\"/frontend\\\" https /dockjob) && \
                   (curl -i -X POST \
                     --url http://kong:8001/services/dockjobapi/plugins \
                     --data 'name=acl' \
                     --data 'config.whitelist=soa_tech_monitoring' \
                    ) && \
                   (curl -i -X POST \
                     --url http://kong:8001/services/dockjobapi/plugins/ \
                     --data 'name=jwt' \
                     --data 'config.secret_is_base64=true&config.claims_to_verify=exp&config.cookie_names=jwt-auth-cookie') \
                \""

##The next section starts a UI for kong called konga. 
##We only need a ui for development experimentation and can be removed if no UI is required
## when it is running it can be accessed on port 1337
  konga:
    image: pantsel/konga
    deploy:
      restart_policy:
        condition: on-failure
    ports:
     - 1337:1337

#docker stack deploy --compose-file=docker-compose-https-ldap-jwt-auth.yml dockjob-https-ldap-jwt-auth
